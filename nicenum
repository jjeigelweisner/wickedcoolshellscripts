#!/bin/bash
# nicenum - Given a number, displays it in comma-separated form. Expects DD
#           (decimal point delimiter) and TD (thousands delimeter) to be
#           instantiated.

nicenumber()
{
  # Note that we assume that '.' is the decimal separator in the INPUT
  # value to this script. The decimal separator in the output value is '.'
  # unless specified by the user with the -d flag.

  integer=$(echo $1 | cut -d. -f1) # Left of decimal
  decimal=$(echo $1 | cut -d. -f2) # Right of decimal

  # Check if number has more than the integer part.
  if [ "$decimal" != "$1" ]; then
    # There's a fractional part, so let's include it.
    result="${DD:= '.'}$decimal"
  fi

  while [ $thousands -gt 999 ]; do
    remainder=$(($thousands % 1000)) # Three least significant digits

    # We need 'remainder' to be three digits. Do we need to add zeros?
    while [ ${#remainder} -lt 3 ]; do # Force leading zeroes
      remainder="0$remainder"
    done

    result="${TD=","}${remainder}${result}" # Builds right to left
    thousands=$(($thousands / 1000)) # To left of remainder, if any
  done

  nice_num="${thousands}${result}"
  if [ ! -z $2 ]; then
    echo $nice_num
  fi
}

DD="."
TD=","


# BEGIN MAIN SCRIPT
# =================

while getopts "d:t:" opt; do
  case $opt in
    d ) DD="$OPTARG" ;;
    t ) TD="$OPTARG" ;;
  esac
done
shift $(($OPTIND - 1))

# Input validation
if [ $# -eq 0 ]; then
  echo "Usage: $(basename $0) [-d c] [-t c] NUMBER"
  echo "  -d Specifies the decimal point delimiter"
  echo "  -t Specifies the thousands delimiter"
  exit 0
fi

nicenumber $1 1 # Second arg forces nice number to 'echo' output.

exit 0
